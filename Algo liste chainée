Fonction CreerListePoids (nombreEntrees: entier strict positif):liste<Poids>

Début

    listePoids <- créerListeVide()
    courant <- CreerListeVide()

    Pour i allant de 1 à nombreEntrees faire :
        poids<- (UserEntry)
        nouveauPoids<-CréerPoidsVide()
        nouveauPoids.poids<-poids
        Si listePoids == NULL faire 
            listePoids <- nouveauPoids
        Sinon 
            courant.suivant <- nouveauPoids
        courant <- nouveauPoids
        Fin Si
    Fin Pour


    CreerListePoids <- listePoids

Fin


Fonction InitNeur (nombreEntrees: entier strict positif): Neurone

Début

    biais <- (UserEntry)
    listePoids <- CreerListePoids(nombreEntrees)

    neurone <- CréerNeuroneVide()
    neurone.biais <- biais
    neurone.listePoids <- listePoids
    neurone.suivant <- NULL

    InitNeur <- neurone

Fin





Fonction OutNeurone (neurone: Neurone, entrees: Liste<entrée:entier>): entier

Début

    Si neurone == NULL ou entrees == NULL faire
        Afficher("Erreur : Neurone ou liste d'entrées invalide.")
        OutNeurone<- ERREUR
    Fin Si

    somme <- 0
    courantPoids <- neurone.listePoids
    courantEntree <- entrees

    Tant que courantPoids != NULL et courantEntree != NULL faire
        somme <- somme + courantPoids.poids * courantEntree.valeur
        courantPoids <- courantPoids.suivant
        courantEntree <- courantEntree.suivant
    Fin Tant Que

    Si somme >= neurone.seuil faire
        OutNeurone<-1
    Sinon
        OutNeurone<-0
    Fin Si

Fin




Fonction InitCouche (nombreNeurones: entier strict positif, nombreEntrees: entier strict positif): Couche

Début

    nouvelleCouche <- CréerCoucheVide()
    nouvelleCouche.listeNeurones <- NULL
    nouvelleCouche.suivant <- NULL
    
    courant <- NULL
    
    Pour i allant de 1 à nombreNeurones faire
        Afficher "Initialisation du neurone " + i + " de la couche :"
        
        nouveauNeurone <- InitNeur(nombreEntrees)
        
        Si nouvelleCouche.listeNeurones == NULL alors
            nouvelleCouche.listeNeurones <- nouveauNeurone
        Sinon
            courant.suivant <- nouveauNeurone
        Fin Si
        
        courant <- nouveauNeurone
    Fin Pour
    
    InitCouche <- nouvelleCouche

Fin



Fonction Outcouche (couche: Couche, entrees: Liste<entré:entier>): Liste<entrée:entier>

Début

    Si couche == NULL ou couche.listeNeurones == NULL ou entrees == NULL alors
        Afficher "Erreur : Couche ou liste d'entrées invalide."
        Outcouche<- ERROR
    Fin Si

    listeSorties <- CréerListeVide()
    courantSorties <- NULL

    courantNeurone <- couche.listeNeurones

    Tant que courantNeurone != NULL faire
        sortie <- Outneurone(courantNeurone, entrees)

        Si listeSorties == NULL alors
            listeSorties <- nouvelleSortie
        Sinon
            courantSorties.suivant <- nouvelleSortie
        Fin Si

        courantSorties <- nouvelleSortie
        courantNeurone <- courantNeurone.suivant
    Fin Tant Que

    Outcouche<-listeSorties

Fin






Fonction CreerResNeur (nbCouches: entier strict positif, neuronesParCouche: tableau d'entiers, entreesPremiereCouche: entier strict positif): Reseau

Début

    reseau <- CréerRéseauVide(Reseau)
    reseau.premiereCouche <- NULL
    reseau.nbCouches <- nbCouches

    coucheCourante <- NULL
    nbEntrees <- entreesPremiereCouche

    Pour i allant de 0 à nbCouches - 1 faire

        Afficher "Création de la couche " + (i + 1) + " avec " + neuronesParCouche[i] + " neurones..."

        nouvelleCouche <- InitCouche(neuronesParCouche[i], nbEntrees)

        Si reseau.premiereCouche == NULL alors
            reseau.premiereCouche <- nouvelleCouche
        Sinon
            coucheCourante.suivant <- nouvelleCouche
        Fin Si

        coucheCourante <- nouvelleCouche

        nbEntrees <- neuronesParCouche[i]

    Fin Pour

    CréerResNeur <- reseau

Fin


Fonction OutReseau (reseau: Reseau, entreesInitiales: Liste<Entrée:entier>): Liste<Entrée:entier>

Début

    entreesActuelles <- entreesInitiales
    coucheCourante <- reseau.premiereCouche

    Tant que coucheCourante != NULL faire
        entreesActuelles <- Outcouche(coucheCourante, entreesActuelles)
        coucheCourante <- coucheCourante.suivant
    Fin Tant que

    OutReseau <- entreesActuelles

Fin



Fonction afficherListeEntrees (listeEntrees: Liste<Entrée>)

Début

    courant <- listeEntrees
    Tant que courant != NULL faire
        Afficher courant.valeur
        courant <- courant.suivant
    Fin Tant que

    Afficher "\n"

Fin



Fonction AfficherNeurone (neurone: Neurone)

Début

    courant <- neurone.listePoids
    Afficher "Poids : "
    
    Tant que courant != NULL faire
        Afficher courant.poids
        courant <- courant.suivant
    Fin Tant que
    
    Afficher "Biais : " + neurone.biais

Fin


Fonction afficherCouche (couche: Couche)

Début

    Si couche == NULL ou couche.listeNeurones == NULL alors
        Afficher "La couche est vide."
        afficheCouche<-- ERROR
    Fin Si

    courant <- couche.listeNeurones
    index <- 1
    Tant que courant != NULL faire
        Afficher "Neurone " + index + " :"
        afficherNeurone(courant) 
        courant <- courant.suivant
        index <- index + 1
    Fin Tant Que

Fin


Fonction afficherReseau (reseau: Reseau)

Début

    coucheCourante <- reseau.premiereCouche
    indexCouche <- 1

    Tant que coucheCourante != NULL faire
        Afficher "Couche ", indexCouche, ":"
        afficherCouche(coucheCourante)
        coucheCourante <- coucheCourante.suivant
        indexCouche <- indexCouche + 1
    Fin Tant que

Fin
